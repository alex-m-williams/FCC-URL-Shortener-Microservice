 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

const url = 'mongodb://fcc:fcc@ds133746.mlab.com:33746/urlshortener';
const mongo = require('mongodb').MongoClient;



if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.route('/12345')
  .get(function(req, res) {
  res.writeHead(302, {'Location': 'https://www.google.com'});
  res.end();
})

app.route('/new')
  .get((req, res) => {
  
});

mongo.connect(url, (err, database) => {
    if (!err) {
      console.log('hi');
    }
   if (err) throw err;
  const myAwesomeDB = database.db('urlshortener')
   let docs = myAwesomeDB.collection('urls');
   let obj = {originalURL: "www.google.com", shortURL: "https://safe-dash.glitch.me/12345"};
   docs.insert(obj, (err, data) => {
       if (err) throw err;
       console.log(JSON.stringify(obj));
   });
   
   database.close();
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

