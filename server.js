 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
const url = require('url');
const validateURL = require('valid-url');


const dburl = 'mongodb://fcc:fcc@ds133746.mlab.com:33746/urlshortener';
const mongo = require('mongodb').MongoClient;



if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });

let routes = 0;
mongo.connect(dburl, (err, database) => {
     if (err) throw err;
    const myAwesomeDB = database.db('urlshortener')
     let docs = myAwesomeDB.collection('urls');
    let highestRoute = 0;
    docs.find({}).toArray((err, result) => {
      for (let i = 0; i < result.length; i++ ){
         if (result[i].route > highestRoute) {
           highestRoute = result[i].route;
         }
       }
      routes = highestRoute;
    });
  database.close();
});

app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.route('/[0-9]*')
  .get(function(req, res) {
  
  let urlRequest = url.parse(req.url, true);
  let pathName = urlRequest.pathname;
  let routeNum = pathName.slice(1, pathName.length);
  
  mongo.connect(dburl, (err, database) => {
     if (err) throw err;
    const myAwesomeDB = database.db('urlshortener')
     let docs = myAwesomeDB.collection('urls');
    docs.find({}).toArray((err, result) => {
       if (err) throw err;
       for (let i = 0; i < result.length; i++ ){
         if (result[i].route == routeNum) {
           // res.writeHead(302, {'Location': result[i].originalURL});
           res.redirect(result[i].originalURL);
            res.end();
         }
       }
   });
     database.close();
  });
})



app.route('/new/*')
  .get((req, res) => {
  let urlRequest = url.parse(req.url, true);
  let pathName = urlRequest.pathname;
  let newRoutePath = "/new/";
  let ogURL = pathName.slice(pathName.indexOf(newRoutePath) + newRoutePath.length, pathName.length);
  console.log(ogURL);
  routes += 1;
  let obj;
  if (validateURL.isUri(ogURL)) {
    console.log("valid url");
    obj = {originalURL: ogURL, shortURL: "https://safe-dash.glitch.me/" + routes, route: routes};
    mongo.connect(dburl, (err, database) => {
       if (err) throw err;
      const myAwesomeDB = database.db('urlshortener')
       let docs = myAwesomeDB.collection('urls');
      let highestRoute = 0;
      docs.insert(obj, (err, data) => {
           if (err) throw err;
           console.log(JSON.stringify(obj));
       });
       database.close();
    });
  } else {
    console.log("invalid url");
  }
  
  
  res.end();
});



// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

